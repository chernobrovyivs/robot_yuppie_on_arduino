// Подключаем библиотеку управления сервомоторами
#include <Servo.h>
// Подключаем библиотеку управления ультразвуковым датчиком
#include <UltrasonicSensorLib.h>
#include <MotorDriverX2Lib.h>

Servo neck;

// Константы - постоянные значения для уточнения углов.
const int left_ang=168; //Без поправки 160
const int front_ang=98; // Без поправки 90
const int right_ang=28; // Без поправки 20
// Временные константы служат для точного задания времени на поворот, разворот, движение вперед.
// в миллисекундах.
const int time_90=390;
const int time_180=750;
const int time_10cm=220;
const int time_7cm=120;

void robot_obstacle_avoidance_func()
{
    // Создаем переменные для хранения двух 
    //дистанций до препятствий спереди, справа.
    int Dist_left, Dist_front, Dist_right;
    _stop(); 
    // Ждем, так как поворот занимает небольшое время.
    delay(250);
    // Записываем расстояние до препятствия впереди.
    Dist_front = sonar(400);
    // Поворачиваем голову направо.
    neck.write(right_ang);
    // Ждем, так как поворот занимает небольшое время.
    delay(250);
    // Записываем расстояние до препятствия впереди.
    Dist_right = sonar(400);
    neck.write(front_ang);
    // Если условия позволяют двигаться прямо
    if((Dist_right>=8)&&(Dist_right<=15)&&(Dist_front>=15))
    {
        forward(); // едем вперед.
        delay(time_10cm);
    }
    else
    {// если появился поворот направо
        if(Dist_right>15)
        {
        // если абсолютно уперлись в стену!
        // узкий правый поворот.
        if(Dist_front<5)
        {
            right(); // поворачиваем направо.
            delay(time_90);
        }
        else // нормальный правый поворот.
        { // поворот направо в движении.
            right(); 
            delay(time_90/3);        
            forward(); // едем вперед 7 см.
            delay(time_90/3);
        }
    }
     else
     // если уперлись в стену.
     if(Dist_front<15)
     {
        left(); // поворачиваем налево.
        delay(time_90);
     }
     else
    { // подворот налево в движении.
        left(); 
        delay(time_90/3);       
        forward(); // едем вперед 5 см.
        delay(time_90/3);
    }
  }
}

void search_free_on_space()
{
    // Константы - постоянные значения для уточнения углов.
    // поворота головы.
    // Эти значения нужно уточнить для вашего робота!
    const int left_ang = 160;
    const int front_ang = 90;
    const int right_ang = 20;
    // Временные константы служат для точного задания времени на поворот,
    //  разворот, движение вперед в миллисекундах.
    // Эти значения нужно уточнить для вашего робота!
    const int time_turn_90 = 390;
    const int time_turn_180 = 750;
    const int time_move_30cm = 220;
    // Длина робота.
    // Эти значения нужно уточнить для вашего робота!
    const int robot_length = 24.5;
    // Эти значения нужно уточнить для вашего робота!
    //Максимальная скорость не может превышать 255.
    const int max_speed = 255;
    //Минимальная скорость, ниже которой колеса уже не вращаются.
    const int min_speed = 155;

    _stop(); 
    // Создаем переменные для хранения трех дистанций - слева, впереди, справа.
    int Dist_left, Dist_front, Dist_right;
    // Поворачиваем голову налево.
    neck.write(left_ang);
    // Ждем, так как поворот занимает небольшое время.
    delay(150);
    // Записываем расстояние до препятствия слева.
    Dist_left = sonar(400);
    // Поворачиваем голову прямо вперед.
    neck.write(front_ang);
    // Ждем, так как поворот занимает небольшое время.
   delay(150);
    // Записываем расстояние до препятствия впереди.
    Dist_front =  sonar(400);
    // Поворачиваем голову направо.
    neck.write(right_ang);
    // Ждем, так как поворот занимает небольшое время.
    delay(150);
    // Записываем расстояние до препятствия впереди.
    Dist_right = sonar(400);
    //Заранее даем команду повернуть голову влево,
    //это уменьшит время остановок робота на анализ местности.
    neck.write(left_ang);

    // Если габариты робота позволяют движение вперед и развороты.
    if ((Dist_right > ((robot_length / 2) - 2)) && (Dist_left > ((robot_length / 2) - 2)))
    {
        if (Dist_front > robot_length) //Если можно двигаться вперед
        {
            forward(); // едем вперед 30см.
            delay(time_move_30cm);
        }
        else if (Dist_right > Dist_left)
        {
            right(); // поворачиваем направо на 90 градусов.
            delay(time_turn_90);
        }
        else
        {
            left(); // поворачиваем направо на 90 градусов.
            delay(time_turn_90);
        }
    }
    else
    {
        do {
                //Отъезжаем назад от препятствия.
                backward();
                delay(time_move_30cm / 2);
                _stop();
                neck.write(left_ang);
                // Ждем, так как поворот занимает небольшое время.
                delay(350);
                // Записываем расстояние до препятствия слева.
                Dist_left = sonar(400);
                neck.write(right_ang);
                // Ждем, так как поворот занимает небольшое время.
                delay(350);
                // Записываем расстояние до препятствия впереди.
                Dist_right = sonar(400);
                //Заранее даем команду повернуть голову влево,
                //это уменьшит время остановок робота на анализ местности.
                neck.write(left_ang);
                // Цикл повторяется, пока есть препятствия для разворота.
            } while ((Dist_right < ((robot_length / 2) - 2)) || (Dist_left < ((robot_length / 2) - 2)));
            //разворачиваем робота.
            left(); 
            delay(time_turn_180);
  }
}

void search_free_on_space_revolution()
{
    // Константы - постоянные значения для уточнения углов.
    // поворота головы.
    // Эти значения нужно уточнить для вашего робота!
    const int left_ang = 160;
    const int front_ang = 90;
    const int right_ang = 20;
    // Временные константы служат для точного задания времени на поворот,
    //  разворот, движение вперед в миллисекундах.
    // Эти значения нужно уточнить для вашего робота!
    const int time_turn_90 = 390;
    const int time_turn_180 = 750;
    const int time_move_30cm = 220;
    const int time_move_15cm = 110;
    // Длина робота.
    // Эти значения нужно уточнить для вашего робота!
    const int robot_length = 24;
    // Эти значения нужно уточнить для вашего робота!
    //Максимальная скорость не может превышать 255.
    const int max_speed = 255;
    //Минимальная скорость, ниже которой колеса уже не вращаются.
    const int min_speed = 155;

    _stop(); 
    // Создаем переменные для хранения трех дистанций - слева, впереди, справа.
    int Dist_left, Dist_front, Dist_right;
    // Поворачиваем голову налево.
    neck.write(left_ang);
    // Ждем, так как поворот занимает небольшое время.
    delay(150);
    // Записываем расстояние до препятствия слева.
    Dist_left = sonar(500);
    // Поворачиваем голову прямо вперед.
    neck.write(front_ang);
    // Ждем, так как поворот занимает небольшое время.
   delay(150);
    // Записываем расстояние до препятствия впереди.
    Dist_front =  sonar(500);
    // Поворачиваем голову направо.
    neck.write(right_ang);
    // Ждем, так как поворот занимает небольшое время.
    delay(150);
    // Записываем расстояние до препятствия впереди.
    Dist_right = sonar(500);
    //Заранее даем команду повернуть голову влево,
    //это уменьшит время остановок робота на анализ местности.
    neck.write(left_ang);

    // Если габариты робота позволяют движение вперед и развороты.
    if ((Dist_right > ((robot_length / 2) - 2)) && (Dist_left > ((robot_length / 2) - 2)))
    {
        if (Dist_front > robot_length) //Если можно двигаться вперед
        {
            forward(); // едем вперед 15см.
            delay(time_move_15cm);
        }
        else if (Dist_right > Dist_left)
        {
            right(); // поворачиваем направо на 90 градусов.
            delay(time_turn_90);
        }
        else
        {
            left(); // поворачиваем направо на 90 градусов.
            delay(time_turn_90);
        }
    }
    else
    {
        do {
                //Отъезжаем назад от препятствия.
                backward();
                delay(time_move_15cm / 2);
                _stop();
                neck.write(left_ang);
                // Ждем, так как поворот занимает небольшое время.
                delay(350);
                // Записываем расстояние до препятствия слева.
                Dist_left = sonar(400);
                neck.write(right_ang);
                // Ждем, так как поворот занимает небольшое время.
                delay(350);
                // Записываем расстояние до препятствия впереди.
                Dist_right = sonar(400);
                //Заранее даем команду повернуть голову влево,
                //это уменьшит время остановок робота на анализ местности.
                neck.write(left_ang);
                // Цикл повторяется, пока есть препятствия для разворота.
            } while ((Dist_right < ((robot_length / 2) - 2)) || (Dist_left < ((robot_length / 2) - 2)));
            //разворачиваем робота.
            left(); 
            delay(time_turn_180);
  }
}

void move_to_front_and_back()
{
    int front_param;
    front_param = sonar(400);

    if ((front_param >= 20) && (front_param <= 30))
    {
        forward_with_speed();
        delay(150);
        Serial.println(front_param);
    } else if (front_param < 10)
    {
        backward_with_speed ();
        delay(150);
        Serial.println(front_param);
    } else
    {
        _stop();
    }
}